#!/usr/bin/env bash

# THIS IS A TEMPLATE FILE (it will be used globally to define
# runs for the bench-runner system).
# BE CAREFUL WHAT YOU CHANGE HERE!

# CURRENTLY WE DO NOT SUPPORT MULTI-THREADED PROGRAMS

# SBATCH RELATED
#SBATCH --exclusive
#SBATCH --partition specialq
#SBATCH --exclude gpu01
#SBATCH --job-name bench-@NAME@
#SBATCH --time @TIMELIMIT@
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=hans@viess.mn
#SBATCH --gres=gpu:k20:1

# SETUP MODULES
module purge
module load shared
module load gcc/4.8.5
module load cuda90/toolkit/9.0.176
module load hwloc/1.11.6
module load sac/amd-dev-git

# BASH SETTINGS
shopt -s nullglob
set -bm

# SETUP SCRIPT
WORKDIR="$(mktemp -d)"
STAGE="NULL"
declare -A SKIP
LOGFILE="output.log"
LOCALDIR="@PWD@"
# shellcheck disable=SC2034
VERBOSITY=4 # info

# PROFILE
@PROFILE@

# STDLIB
# shellcheck disable=SC1091
source @PWD@/modules/logging.bash
# shellcheck disable=SC1091
source @PWD@/modules/sysinfo.bash
# shellcheck disable=SC1091
source @PWD@/modules/misc.bash

# REDIRECTS
exec 2>&1 >&3 # redirect stdout and stderr to fd 3 (logger)

log_dir()
{
    local -a content=( "${1}"/* )
    printf "              ..........................................................\n" >> "${WORKDIR}/${LOGFILE}"
    for i in "${content[@]}"; do
        printf "              %s\n" "$(basename $i)" >> "${WORKDIR}/${LOGFILE}"
    done
    printf "              ..........................................................\n" >> "${WORKDIR}/${LOGFILE}"
}

state()
{
    arraylog "STAGE = ${STAGE}" "COMPILER = ${COMPILER}" \
        "WORKDIR = ${WORKDIR}" "LOCALDIR = ${LOCALDIR}"  \
        "TARGET = ${target:-unset}"                      \
        "VARIENT = ${varient:-unset}"                    \
        "BUILDFLAGS = ${buildflags:-unset}"
    log_dir "${WORKDIR}"
}

save_logs()
{
    inf "saving workdir logs..."

    pushd "$WORKDIR" || exit 10
    logs=( *.log )
    if [ "${#logs[@]}" -gt 0 ]; then
        inf "saving ${logs[*]}"
        if ! tar -cf "${BENCHSUITE}-${BENCHNAME}-result.tar" "${logs[@]}"; then
            error_handling
        fi
        [ -d "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}" ] || mkdir -p "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}"
        if ! mv "${WORKDIR}/${BENCHSUITE}-${BENCHNAME}-result.tar" "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}/"; then
            error_handling
        fi
    else
        inf "no logs to save"
    fi
    popd || exit 10
}

finish()
{
    inf "Removing NVPROF tmp dir, if it exists"
    test -d /tmp/.nvprof && rm -rf /tmp/.nvprof
    inf "Deleting workdir..."
    rm -rf "${WORKDIR}"
}

error_handling()
{
    error "An error was detected, getting state information"
    state
    if [ "x${STAGE}" = "xBUILD" ]; then
        warn "will skip running \`${target}-${varient}' later..."
        SKIP["${target}-${varient}"]=1
    fi
    inf "Trying to continue..."
}

handle_child()
{
    if [[ $? -eq 139 ]]; then
        error "current run has segfaulted, no output could be saved"
        error_handling
    fi
}

# TRAPS

trap finish EXIT
#trap error_handling ERR
trap handle_child CHLD

# we move to the workdir
pushd "${WORKDIR}" || exit 10

# GET SYSTEM INFO

STAGE='INFO'
sysinfo

# COMPILE BENCHMARK

STAGE="BUILD"

if [ "x${MODE}" = "xMANUAL" ]; then
    for source in "${SOURCES[@]}"; do
        cp -r "${LOCALDIR}/${source}" "${WORKDIR}/"
    done

    # call build function
    capture build
else
    for source in "${SOURCES[@]}"; do
        count=0
        for target in "${TARGETS[@]}"; do
            for varient in "${VARIENTS[@]}"; do
                buildflags="$(eval echo "\${BUILDFLAGS_${varient}[${count}]}")"
                binary_name="${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out"
                build_log="${WORKDIR}/sac2c-build-${target}-${varient}.log"
                inf "compiling target '$target' varient '$varient' with \`${buildflags}'"
                if ! $COMPILER "${buildflags}" -t "$target" -o "${binary_name}" "${LOCALDIR}/${source}" &> "${build_log}"; then
                    error_handling
                fi
            done
            count+=1
        done
    done
fi

# HANDLE INPUT

STAGE="INPUT"

if [ ${#INPUTS[@]} -ne 0 ]; then
    for input in "${INPUTS[@]}"; do
        inf "copying $input to workdir ${WORKDIR}"
        cp -r "${LOCALDIR}/${input}" "${WORKDIR}/"
    done
fi

# RUN BENCHMARK

TFORMAT="elapsed: %e s"
STAGE="RUN"

if [ "x${MODE}" = "xMANUAL" ]; then
    # call run function
    capture run
else
    for target in "${TARGETS[@]}"; do
        for varient in "${VARIENTS[@]}"; do
            if [ ${SKIP[${target}-${varient}]-0} -gt 0 ]; then
                inf "SKIPPING target '$target' and varient '$varient'"
                continue
            fi
            binary_name="${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out"
            binary_log="${WORKDIR}/${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.log"
            if [ ! -e "${binary_name}" ]; then
                error "Binary missing! SKIPPING target '$target' and varient '$varient'"
                state
                continue
            fi
            inf "RUNNING target '$target' and varient '$varient'"
            if [ -z "${STDINS}" ]; then
                if ! /usr/bin/time -p -o "timerfile" -f "${TFORMAT}" ./"${binary_name}" "${RUNFLAGS}" > "${binary_log}" 2>> "${LOGFILE}"; then
                    error_handling
                fi
            else
                if ! /usr/bin/time -p -o "timerfile" -f "${TFORMAT}" ./"${binary_name}" "${RUNFLAGS}" < "${STDINS}" > "${binary_log}" 2>> "${LOGFILE}"; then
                    error_handling
                fi
            fi
            cat "timerfile" >> "${binary_log}"

            if [[ "${target}" =~ "cuda" ]]; then
                inf "Doing CUDA run"
                cuda_log="${WORKDIR}/nvprof-${target}-${varient}.csv.log"
                if [ -z "${STDINS}" ]; then
                    if ! nvprof --profile-api-trace all --unified-memory-profiling per-process-device -u ms --csv --log-file "${cuda_log}" ./"${binary_name}" "${RUNFLAGS}" > /dev/null 2>> "${LOGFILE}"; then
                        error_handling
                    fi
                else
                    if ! nvprof --profile-api-trace all --unified-memory-profiling per-process-device -u ms --csv --log-file "${cuda_log}" ./"${binary_log}" "${RUNFLAGS}" < "${STDINS}" > /dev/null 2>> "${LOGFILE}"; then
                        error_handling
                    fi
                fi
            fi
        done
    done
fi

# we leave the workdir
popd || exit 10

inf "done running"

# SAVE LOGS

STAGE="SAVE"

save_logs


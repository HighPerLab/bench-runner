#!/usr/bin/env bash

# THIS IS A TEMPLATE FILE (it will be used globally to define
# runs for the bench-runner system).
# BE CAREFUL WHAT YOU CHANGE HERE!

# CURRENTLY WE DO NOT SUPPORT MULTI-THREADED PROGRAMS

# SBATCH RELATED
#SBATCH --exclusive
#SBATCH --partition amd-longq
#SBATCH --job-name bench-@NAME@
#SBATCH --time @TIMELIMIT@
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=hans@viess.mn
#SBATCH --gres=gpu:k20:1
#SBATCH --cpus-per-task 2

# SETUP MODULES
module purge
module load shared
module load gcc/4.8.5
module load cuda90/toolkit/9.0.176
module load hwloc/1.11.6
module load sac/amd-dev-git

# BASH SETTINGS
shopt -s nullglob
set -bm

# SETUP SAC
SAC2C="$(which sac2c_d)"
WORKDIR="$(mktemp -d)"
STAGE="NULL"
declare -A SKIP
LOGFILE="output.log"
LOCALDIR="@PWD@"

# PROFILE
@PROFILE@

# HELPER FUNCTIONS

log()
{
    printf "[%s](${BENCHSUITE}-${BENCHNAME}): %s\n" "$(date +'%F %T %Z')" "$1" >> "${WORKDIR}/${LOGFILE}"
}

log_column()
{
    printf "          %-20s = %-20s\n" "$1" "$2" >> "${WORKDIR}/${LOGFILE}"
}

log_dir()
{
    local -a content=( "${1}"/* )
    printf "              ..........................................................\n" "$(date +'%F %T %Z')" >> "${WORKDIR}/${LOGFILE}"
    for i in ${content[@]}; do
        printf "              %s\n" "$(basename $i)" >> "${WORKDIR}/${LOGFILE}"
    done
    printf "              ..........................................................\n" "$(date +'%F %T %Z')" >> "${WORKDIR}/${LOGFILE}"
}

state()
{
    printf " #################################################################################\n" >> "${WORKDIR}/${LOGFILE}"
    log_column "STAGE" "${STAGE}"
    log_column "SAC2C" "${SAC2C}"
    log_column "WORKDIR" "${WORKDIR}"
    log_dir "${WORKDIR}"
    log_column "LOCALDIR" "${LOCALDIR}"
    [ -z "${target}" ] || log_column "TARGET" "${target}"
    [ -z "${varient}" ] || log_column "VARIENT" "${varient}"
    [ -z "${buildflags}" ] || log_column "BUILDFLAGS" "${buildflags}"
    printf " #################################################################################\n" >> "${WORKDIR}/${LOGFILE}"
}

save_logs()
{
    log "saving workdir logs..."

    pushd "$WORKDIR"
    logs=( *.log )
    if [ ! -z $logs ]; then
        log "saving ${logs[@]}"
        tar -cf "${BENCHSUITE}-${BENCHNAME}-result.tar" "${logs[@]}"
        [ $? -ne 0 ] && error_handling
        [ -d "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}" ] || mkdir -p "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}"
        mv "${WORKDIR}/${BENCHSUITE}-${BENCHNAME}-result.tar" "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}/"
        [ $? -ne 0 ] && error_handling
    else
        log "no logs to save"
    fi
    popd
}

finish()
{
    log "Deleting workdir..."
    rm -rf "${WORKDIR}"
}

error_handling()
{
    log "An error was detected, getting state information"
    state
    if [ "x${STAGE}" = "xBUILD" ]; then
        log " will skip running \`${target}-${varient}' later..."
        SKIP["${target}-${varient}"]=1
    fi
    log "Trying to continue..."
}

handle_child()
{
    if [[ $? -eq 139 ]]; then
        log "current run has segfaulted, no output could be saved"
        error_handling
    fi
}

# TRAPS

trap finish EXIT
#trap error_handling ERR
trap handle_child CHLD

# we move to the workdir
pushd "${WORKDIR}"

# GET SYSTEM INFO

STAGE='INFO'

# Printout as much information as is good :-)
cat > "${LOGFILE}" <<HERE
## System information:
  Date: $(date)
    OS: $(lsb_release -s -d)
 Linux: $(uname -a)
   SAC: $(sac2c_d -V)
   GCC: $(gcc -dumpversion)
  NVCC: $(nvcc --version | tail -n1)

   CPU:
    model - $(grep -m 1 "model name" /proc/cpuinfo |cut -d' ' -f 4-)
      mhz - $(grep -m 1 "cpu MHz" /proc/cpuinfo |cut -d' ' -f 3-)

   GPU:
$(nvidia-smi --query-gpu=name,driver_version --format=csv,noheader)

   Mem:
     free - $(grep MemFree /proc/meminfo | cut -d' ' -f 2-)
    total - $(grep MemTotal /proc/meminfo | cut -d' ' -f 2-)   
##
HERE

# COMPILE BENCHMARK

STAGE="BUILD"

if [ "x${MODE}" = "xMANUAL" ]; then
    for source in ${SOURCES[@]}; do
        cp -r "${LOCALDIR}/${source}" "${WORKDIR}/"
    done

    # call build function
    build &>> "${LOGFILE}"
else
    for source in ${SOURCES[@]}; do
        count=0
        for target in ${TARGETS[@]}; do
            for varient in ${VARIENTS[@]}; do
                buildflags="$(eval echo "\${BUILDFLAGS_${varient}[${count}]}")"
                log "compiling target '$target' varient '$varient' with \`${buildflags}'"
                $SAC2C ${buildflags} -t $target -o "${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out" "${LOCALDIR}/${source}" &> "sac2c-build-${target}-${varient}.log"
                [ $? -ne 0 ] && error_handling
            done
            count+=1
        done
    done
fi

# HANDLE INPUT

STAGE="INPUT"

if [ ${#INPUTS[@]} -ne 0 ]; then
    for input in "${INPUTS[@]}"; do
        log "copying $input to workdir ${WORKDIR}"
        cp -r "${LOCALDIR}/${input}" "${WORKDIR}/"
    done
fi

# RUN BENCHMARK

TFORMAT="elapsed: %e s"
STAGE="RUN"

if [ "x${MODE}" = "xMANUAL" ]; then
    # call run function
    run &>> "${LOGFILE}"
else
    for target in ${TARGETS[@]}; do
        for varient in ${VARIENTS[@]}; do
            if [ ${SKIP[${target}-${varient}]-0} -gt 0 ]; then
                continue
            fi
            if [ ! -e "${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out" ]; then
                log "binary missing!"
                state
                log "trying to continue..."
                continue
            fi
            log "RUNNING target '$target' and varient '$varient'"
            if [ -z "${STDINS}" ]; then
                /usr/bin/time -p -o "timerfile" -f "${TFORMAT}" ./"${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out" "${RUNFLAGS}" > "${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.log" 2>> "${LOGFILE}"
            else
                /usr/bin/time -p -o "timerfile" -f "${TFORMAT}" ./"${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out" "${RUNFLAGS}" < "${STDINS}" > "${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.log" 2>> "${LOGFILE}"
            fi
            [ $? -ne 0 ] && error_handling # FIXME we need something more sane here
            cat "timerfile" >> "${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.log"

            if [[ "${target}" =~ "cuda" ]]; then
                log "Doing CUDA run"
                if [ -z "${STDINS}" ]; then
                    nvprof --profile-api-trace all --unified-memory-profiling per-process-device -u ms --csv --log-file "nvprof-${target}-${varient}.csv.log" ./"${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out" "${RUNFLAGS}" > /dev/null 2>> "${LOGFILE}"
                else
                    nvprof --profile-api-trace all --unified-memory-profiling per-process-device -u ms --csv --log-file "nvprof-${target}-${varient}.csv.log" ./"${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out" "${RUNFLAGS}" < "${STDINS}" > /dev/null 2>> "${LOGFILE}"
                fi
                [ $? -ne 0 ] && error_handling # FIXME we need something more sane here
            fi
        done
    done
fi

# we leave the workdir
popd

log "done running"

# SAVE LOGS

STAGE="SAVE"

save_logs


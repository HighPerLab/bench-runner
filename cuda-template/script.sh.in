# PARSE ARGUMENTS
argparse "$@"

# because of HDD space limits, we need to mount a ramdrive
# this has to happen first otherwise things could go fubar.
if [ "$MOUNT" = true ]; then
    mounttmp
fi

export TMPDIR=/dev/shm
WORKDIR="$(mktemp -d)"
LOGFILE="${WORKDIR}/output.log"

loginit "$VERBOSITY" "$LOGFILE"
exec 2>&1 >&3 # redirect stdout and stderr to fd 3 (logger)

log_dir()
{
    local -a content=( "${1}"/* )
    printf '        ........................ LOCAL FILES .....................\n'
    for i in "${content[@]}"; do
        printf '        %s\n' "$(basename "$i")"
    done
    printf '        ..........................................................\n'
}

state()
{
    arraylog "STAGE = ${STAGE}" \
        "COMPILER = ${COMPILER}" "WORKDIR = ${WORKDIR}" \
        "LOCALDIR = ${LOCALDIR}" "TARGET = ${target:-unset}" \
        "VARIENT = ${varient:-unset}" \
        "BUILDFLAGS = ${buildflags:-unset}"
    log_dir "${WORKDIR}"
}

saveit()
{
    inf "saving work directory..."

    # copy current script over as well (must happen before pushd)
    cp "$(readlink -f "$USCRIPT")" "${WORKDIR}/"

    pushd "$TMPDIR" || exit 10

    # we don't always copy over the sources, so we need to make sure we do this
    # eventually.
    # FIXME perhaps we should do this always...
    for s in "${SOURCES[@]}"; do
        [ -e "$(basename "${s}")" ] || cp -r "${LOCALDIR}/${s}" "${WORKDIR}/"
    done

    if ! tar -czf "${BENCHSUITE}-${BENCHNAME}-result.tar.gz" -C "${WORKDIR}" --exclude "timerfile" .; then
        error_handling
    fi
    [ -d "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}" ] || mkdir -p "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}"
    if ! mv "${BENCHSUITE}-${BENCHNAME}-result.tar.gz" "${LOCALDIR}/results/${BENCHSUITE}-${BENCHNAME}/"; then
        error_handling
    fi
    [ -e "${BENCHSUITE}-${BENCHNAME}-result.tar.gz" ] && rm "${BENCHSUITE}-${BENCHNAME}-result.tar.gz"
    popd || exit 10
}

finish()
{
    # clear dir stack
    dirs -c
    # and move away from $TMPDIR
    cd / || exit 10

    inf "Removing NVPROF tmp dir, if it exists"
    test -d "$TMPDIR/.nvprof" && rm -rf "$TMPDIR/.nvprof"

    inf "Deleting workdir..."
    rm -rf "${WORKDIR}"

    # if we mounted our ramdrive we need to unmount it now
    # XXX this should only be safe on GPU nodes
    if [ "$MOUNT" = true ]; then
        umounttmp
    fi
}

error_handling()
{
    error "An error was detected, getting state information"
    state
    if [ "x${STAGE}" = "xBUILD" ]; then
        warn "will skip running \`${target}-${varient}-${btype}' later..."
        SKIP["${target}-${varient}-${btype}"]=1
    fi
    inf "Trying to continue..."
}

handle_child()
{
    if [[ $? -eq 139 ]]; then
        error "current run has segfaulted, no output could be saved"
        error_handling
    fi
}

# TRAPS

trap finish EXIT
#trap error_handling ERR
trap handle_child CHLD

# we move to the workdir
pushd "${WORKDIR}" || exit 10

# GET SYSTEM INFO

STAGE='INFO'
notify "Running \`${BENCHNAME}' from \`${BENCHSUITE}'"
notify "Gathering system Information"
sysinfo

# COMPILE BENCHMARK

STAGE="BUILD"

# shellcheck disable=SC2153
if [[ "${STAGES[build]}" == true ]]; then
    if [ "x${MODE}" = "xMANUAL" ]; then
        for source in "${SOURCES[@]}"; do
            cp -r "${LOCALDIR}/${source}" "${WORKDIR}/"
        done

        # call build function
        capture build
    elif [ "x${MODE}" = "xMAKE" ]; then
        # we treat the sources differently, and instead copy the entire directory tree
        # we move inside the copied directory tree, and call make
        # build flags are extra arguments to make
        for source in "${SOURCES[@]}"; do
            cp -r "${LOCALDIR}/${source}" "${WORKDIR}/"
        done
        pushd "${WORKDIR}/${SOURCES[0]}" || exit 10
        count=0
        for target in "${TARGETS[@]}"; do
            if [ -n "${TARGET}" ] && [ "x${TARGET}" != "x${target}" ]; then
                inf "Skipping build of target '$target', looking for '$TARGET'"
                # we need to keep incrementing the target count
                (( count += 1 ))
                continue
            fi
            for varient in "${VARIENTS[@]}"; do
                read -r -a buildflags <<< "$(eval echo "\${BUILDFLAGS_${varient}[${count}]}")"
                build_log="${WORKDIR}/build-${target}-${varient}.log"
                btype='t'
                inf "compiling target '$target' variant '$varient' with \`${buildflags[*]}'"
                if ! $COMPILER "${target}" "${buildflags[@]}" &>> "${build_log}"; then
                    error_handling
                fi
                # move binary one directory up
                mv "${target}" ../
                unset btype
            done
            (( count += 1 ))
        done
        popd || exit 10
    else
        for source in "${SOURCES[@]}"; do
            count=0
            for target in "${TARGETS[@]}"; do
                if [ -n "${TARGET}" ] && [ "x${TARGET}" != "x${target}" ]; then
                    inf "Skipping build of target '$target', looking for '$TARGET'"
                    # we need to keep incrementing the target count
                    (( count += 1 ))
                    continue
                fi
                for varient in "${VARIENTS[@]}"; do
                    read -r -a buildflags <<< "$(eval echo "\${BUILDFLAGS_${varient}[${count}]}")"
                    binary_name="${BENCHSUITE}-${BENCHNAME}-${target}-${varient}.out"
                    build_log="${WORKDIR}/build-${target}-${varient}.log"
                    # extra flags, reset on each iteration
                    xflags=""

                    #if [[ "${target}" =~ "cuda" ]]; then
                    #    # titan xp
                    #    #xflags="-mt_bind simple -cuda_arch sm61"
                    #    # V100
                    #    #xflags="-mt_bind simple -cuda_arch sm70"
                    #    # k20
                    #    xflags="-mt_bind simple -cuda_arch sm35"
                    #fi

                    #if [[ ! "${target}" =~ "mt" ]]; then
                    #    btype='p'
                    #    inf "compiling Profiling-Version target '$target' variant '$varient' with \`${buildflags[*]}'"
                    #    if ! $COMPILER "${buildflags[@]}" ${xflags} -o "profile-${binary_name}" "${LOCALDIR}/${source}" &>> "${build_log}"; then
                    #        error_handling
                    #    fi
                    #fi
                    btype='t'
                    inf "compiling Timing-Version target '$target' variant '$varient' with \`${buildflags[*]}'"
                    if ! $COMPILER "${buildflags[@]}" ${xflags} -o "${binary_name}" "${LOCALDIR}/${source}" &>> "${build_log}"; then
                        error_handling
                    fi
                    unset btype
                done
                (( count += 1 ))
            done
        done
    fi
fi

# we should unset the counter from before
unset count

# HANDLE INPUT

STAGE="INPUT"

if [ ${#INPUTS[@]} -ne 0 ]; then
    for input in "${INPUTS[@]}"; do
        inf "copying $input to working directory ${WORKDIR}"
        cp -r "${LOCALDIR}/${input}" "${WORKDIR}/"
    done
fi

# RUN BENCHMARK

STAGE="RUN"

if [ "x${MODE}" = "xMANUAL" ]; then
    if [[ "${STAGES[profile]}" == true || "${STAGES[time]}" == true || "${STAGES[trace]}" == true ]]; then
        # call run function
        capture run
    fi
else
    for target in "${TARGETS[@]}"; do
        if [ -n "${TARGET}" ] && [ "x${TARGET}" != "x${target}" ]; then
            inf "Skipping run of target '$target', looking for '$TARGET'"
            continue
        fi
        for varient in "${VARIENTS[@]}"; do
            binary_name="${target}"
            if [ ! -e "${binary_name}" ]; then
                error "Timing binary missing! SKIPPING target '$target' and variant '$varient'"
                state
                continue
            fi
            if [ ${SKIP[${target}-${varient}-t]-0} -gt 0 ]; then
                inf "SKIPPING timing target '$target' and variant '$varient'"
            else
                if [[ "${STAGES[time]}" == true ]]; then
                    inf "TIMING target '$target' with variant '$varient'"
                    inf "Doing ${MAXREP} repetitions of this run"
                    for ((size = REPRANGE[0]; size <= REPRANGE[1]; size += REPRANGE[2])); do
                        binary_log="${WORKDIR}/time-${target}-${varient}-${size}.log"
                        for ((count = 1; count <= 5; count++)); do
                            inf "SIZE: ${size}, REPETITION: ${count}/5"
                            __log_noredirect 4 "INFO" "SIZE: ${size}, REPETITION: ${count}/5" >> "${binary_log}"
                            timeit "${binary_name}" "${size} ${RUNFLAGS}" "${binary_log}" "${STDINS}"
                        done
                    done
                fi

                if [[ "${STAGES[trace]}" == true ]]; then
                    inf "PROFILING GPU target '$target' with variant '$varient'"
                    # we need to clear out the nvprof dir as it can get really full...
                    debug "Clearing the NVPROF tmp directory"
                    test -d "$TMPDIR/.nvprof" && rm -rf "$TMPDIR/.nvprof"
                    for ((size = REPRANGE[0]; size <= REPRANGE[1]; size += REPRANGE[2])); do
                        cuda_log="${WORKDIR}/profile-nvprof-${target}-${varient}-${size}.csv.log"
                        timeit_cuda "${binary_name}" "${size} ${RUNFLAGS}" "${cuda_log}" "${STDINS}"
                        if [[ ! "${target}" =~ "_man" ]]; then # also handles _manp
                            inf "TRACING GPU operations for '$target' with varient '$varient'"
                            cuda_log="${WORKDIR}/trace-nvprof-${target}-${varient}-${size}.csv.log"
                            nvprof_trace "${binary_name}" "${size} ${RUNFLAGS}" "${cuda_log}" "${STDINS}"
                        fi
                    done
                    unset cuda_log
                fi
            fi
            unset binary_name binary_log count
        done
    done
fi

# we leave the workdir
popd || exit 10

inf "done running"

# SAVE LOGS

STAGE="SAVE"

saveit

